pipeline {
    agent any
    tools {
        nodejs 'testenvnode' 
    }
    environment {
        HOME_FOLDER = "/var/lib/jenkins"
        ERROR_LOG = "${HOME_FOLDER}/jenkinserrorlog"
        DOCKER_IMAGE_NAME = "timohubner431/my-app"
        DOCKER_TAG = "latest"
    }
    stages {
        stage('Cleanup') {
            steps {
                deleteDir()  // Verwijdert de inhoud van de workspace
            }
        }
        stage('Install dependencies') {
            steps {
                script {
                    // Gebruik van de vooraf gedefinieerde Node.js tool
                    sh 'npm install'
                }
            }
        }
        stage('Clone Repository') {
            steps {
                // Klonen van de GitHub repository naar de Jenkins workspace
                git https://github.com/TimoHubner444/calculator-app-finished.git'
            }
        }
        

        stage('Build artifact') {
            steps {
                script {
                    // Zorg ervoor dat je een werkende Dockerfile hebt voordat je de container bouwt
                    sh 'docker build -t mijn-image .'
                }
            }
        }
        stage('Login to Docker Hub') {
            steps {
                script {
                    // Login naar Docker Hub met opgeslagen credentials
                    docker.withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin"
                    }
                }
            }
        }
        stage('Push Artifact') {
            steps {
                script {
                    // Tag de image met de naam van de Docker Hub repository van je teamgenoot
                    sh 'docker tag myapp teamgenoot123/calculator-app:latest'

                    // Push de image naar Docker Hub
                    sh 'docker push timohubner431/my-app:latest'
                }
            }
        }
        stage('Deployment') {
                    steps {
                        sh 'docker run -d -p 3000:3000 timohubner431/my-app:latest'
                    }
                }

        }    
    }

