pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'timohubner431/my-app'  // Replace with actual DockerHub repository
    }
    
    stages {
        stage('cleanup') {
            steps {
                // Clean the workspace directory before starting
                deleteDir()
            }
        }
        
        stage('Install dependencies') {
            steps {
                // Install NodeJS dependencies using the global tool configuration 'testenvnode'
                script {
                    // Get the path to the Node.js installation using the tool name
                    def nodeVersion = tool name: 'testenvnode', type: 'NodeJS'
                    
                    // Run 'npm install' using the Node.js installation path
                    sh "${nodeVersion}/bin/npm install"
                }
            }
        }
        
        stage('Build artifact') {
            steps {
                // Build the Docker image
                script {
                    sh '''
                    docker build -t ${DOCKER_IMAGE} .
                    '''
                }
            }
        }
        
        stage('Push artifact') {
            steps {
                // Push the image to DockerHub
                script {
                    withDockerRegistry([credentialsId: 'dockerhub-credentials', url: 'https://index.docker.io/v1/']) {
                        sh "docker push ${DOCKER_IMAGE}"
                    }
                }
            }
        }
        
        stage('Deployment') {
            steps {
                // Deploy Docker container on the test server (on port 3000)
                script {
                    sh '''
                    docker pull ${DOCKER_IMAGE}
                    docker run -d -p 3000:3000 ${DOCKER_IMAGE}
                    '''
                }
            }
        }
    }
    
    post {
        always {
            // Clean up the environment after the pipeline execution
            cleanWs()
        }
    }
}
