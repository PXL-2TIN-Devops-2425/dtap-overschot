pipeline {
    agent any
    tools {
        nodejs 'testenvnode' 
    }
    environment {
        HOME_FOLDER = "/var/lib/jenkins"
        ERROR_LOG = "${HOME_FOLDER}/jenkinserrorlog"
        DOCKER_IMAGE_NAME = "timohubner431/my-app"  // Make sure the name is correct
        DOCKER_TAG = "latest"
    }
    stages {
        stage('Cleanup') {
            steps {
                deleteDir()  // Cleans the workspace
            }
        }

        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/TimoHubner444/calculator-app-finished.git'
            }
        }

        stage('Install dependencies') {
            steps {
                script {
                    // Use predefined Node.js tool
                    sh 'npm install'
                }
            }
        }

        stage('Build artifact') {
            steps {
                script {
                    // Ensure you have a working Dockerfile before building the container
                    sh "docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_TAG} ."
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                script {
                    // Use withCredentials to pass Docker Hub credentials securely
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin"
                    }
                }
            }
        }

        stage('Push Artifact') {
            steps {
                script {
                    // Tag the image with the Docker Hub repository name
                    sh "docker tag ${DOCKER_IMAGE_NAME}:${DOCKER_TAG} ${DOCKER_IMAGE_NAME}:${DOCKER_TAG}"

                    // Push the image to Docker Hub
                    sh "docker push ${DOCKER_IMAGE_NAME}:${DOCKER_TAG}"
                }
            }
        }

        stage('Deployment') {
            steps {
                // Start the Docker container on port 3000
                sh "docker run -d -p 3000:3000 ${DOCKER_IMAGE_NAME}:${DOCKER_TAG}"
            }
        }
    }
}
