pipeline {
    agent any
    tools {
        nodejs 'testenvnode' 
    }
    environment {
        HOME_FOLDER = "/var/lib/jenkins"
        ERROR_LOG = "${HOME_FOLDER}/jenkinserrorlog"
        DOCKER_IMAGE_NAME = "timohubner431/my-app"
        DOCKER_TAG = "latest"
    }
    stages {
        stage('Clean Workspace') {
            steps {
                deleteDir()  // Clean the workspace before starting
            }
        }
        stage('Fetching Source') {
            steps {
                checkout([$class: 'GitSCM', 
                          branches: [[name: '*/main']], 
                          userRemoteConfigs: [[url: 'git@github.com:TimoHubner444/calculator-app-finished.git', 
                                               credentialsId: 'ssh-key-git']]])
            }
        }
        stage('Install Dependencies') {
            steps {
                sh 'npm install'  // Install dependencies from package.json
            }
        }
        stage('Unittests') {
            steps {
                sh 'npm test'  // Run unit tests
                junit '**/jest-junit.xml'  // Archive test results
            }
        }
        stage('Create Bundle') {
            steps {
                sh '''
                mkdir -p bundle
                cp -r app.js routes.js server.js package.json public bundle/
                rm -rf bundle/.git bundle/.gitignore bundle/README.md  
                zip -r bundle.zip bundle  // Create a zip bundle of the app
                '''
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image
                    sh "docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_TAG} ."
                }
            }
        }
        stage('Push Docker Image to DockerHub') {
            steps {
                script {
                    // Log in to DockerHub and push the image
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh """
                        echo \$DOCKER_PASSWORD | docker login -u \$DOCKER_USERNAME --password-stdin
                        docker push ${DOCKER_IMAGE_NAME}:${DOCKER_TAG}
                        """
                    }
                }
            }
        }
        stage('Deployment') {
            steps {
                script {
                    sh '''
                    docker pull ${DOCKER_IMAGE}
                    docker run -d -p 3000:3000 ${DOCKER_IMAGE}
                    '''
                }
            }
        }
    }
    post {
        success {
            archiveArtifacts artifacts: 'bundle.zip', fingerprint: true  // Archive the generated bundle
        }
        failure {
            script {
                sh 'echo "Pipeline attempt failed on $(date)" >> ${ERROR_LOG}'  // Log errors
            }
        }
        always {
            cleanWs()  // Clean up the workspace after the pipeline run
        }
    }
}

