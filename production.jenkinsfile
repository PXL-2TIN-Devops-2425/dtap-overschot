pipeline {
    agent any

    environment {
        // Define the server and Docker image variables
        PROD_SERVER = 'ubuntu@3.91.218.68'
        DOCKER_IMAGE = 'timohubner431/my-app:latest'
        DOCKER_PORT = '3000' // Update to match the app's running port inside the container
        CONTAINER_NAME = 'prod-container'  // Name of the Docker container
    }

    stages {
        stage('Deploy Prod') {
            steps {
                script {
                    sh 'ssh-keyscan -H 3.91.218.68 >> ~/.ssh/known_hosts'
                    // Pull the latest version of the Docker container
                    sshagent(['key-opdracht6']) {
                        sh """
                            ssh ${PROD_SERVER} 'docker pull ${DOCKER_IMAGE}'
                        """
                    }
                }
            }
        }

        stage('Stop and Remove Old Container') {
            steps {
                script {
                    // Stop and remove any existing container (if present)
                    sshagent(['key-opdracht6']) {
                        sh """
                            ssh ${PROD_SERVER} 'docker stop ${CONTAINER_NAME} || true'
                            ssh ${PROD_SERVER} 'docker rm ${CONTAINER_NAME} || true'
                        """
                    }
                }
            }
        }

        stage('Start Prod') {
            steps {
                script {
                    // Start the new container on the remote server
                    sshagent(['key-opdracht6']) {
                        sh """
                            ssh ${PROD_SERVER} 'docker run -d --name ${CONTAINER_NAME} -p ${DOCKER_PORT}:${DOCKER_PORT} ${DOCKER_IMAGE}'
                        """
                    }
                }
            }
        }

        stage('Test Prod') {
            steps {
                script {
                    // Test if the application is running by sending a curl request to the VM's port 3000
                    def statusCode = sh(script: "curl -s -o /dev/null -w '%{http_code}' http://3.91.218.68:3000", returnStdout: true).trim()
                    
                    if (statusCode == '200') {
                        echo "Application is running correctly on the production server."
                    } else {
                        error "The application is not available (status code: ${statusCode})."
                    }
                }
            }
        }


        stage('Cleanup') {
            steps {
                script {
                    // Remove old Docker containers and unused images to free up resources
                    sshagent(['key-opdracht6']) {
                        sh """
                            ssh ${PROD_SERVER} 'docker system prune -f'
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline completed.'
        }
        success {
            echo 'Deployment to production was successful!'
        }
        failure {
            echo 'An error occurred during the production deployment.'
        }
    }
}
